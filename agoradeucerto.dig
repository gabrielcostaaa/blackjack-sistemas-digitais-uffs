<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>blackjack</string>
        </entry>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,start_reset,hit,stay,sw:10</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity blackjack is
    port (
        clk : in std_logic;
        start_reset : in std_logic;
        hit : in std_logic;
        stay : in std_logic;

        sw : IN STD_LOGIC_VECTOR(9 DOWNTO 0); -- sw(3), sw(2), sw(1), sw(0) =&gt; CARTA_CIRCUITO_EXTERNO;

        hex0 : out std_logic_vector(6 downto 0);  -- unidade soma cartas decimal
        hex1 : out std_logic_vector(6 downto 0);  -- dezena soma cartas decimal
        hex2 : out std_logic_vector(6 downto 0);  -- usado para escrever em alguns estados
        hex3 : out std_logic_vector(6 downto 0);  -- hexadecimal carta mão

        ledR : out std_logic_vector(9 downto 0)  -- WIN (7,8,9); TIE (4,5); LOSE (0,1,2);
    );
end blackjack;

architecture gurizes of blackjack is

    type tipo_estado is (
        inicio,
        jogador,
        jogador_as,
        carteador,
        carteador_as,
        resultado
    );

    signal estado_atual : tipo_estado := inicio;

    signal carta_atual : std_logic_vector(3 downto 0) := &quot;0000&quot;;
    signal carta_circuito_externo : std_logic_vector(3 downto 0) := &quot;0000&quot;;

    signal soma_cartas_jogador : integer := 0;
    signal soma_cartas_carteador : integer := 0;

    signal possui_as : std_logic_vector(1 downto 0) := &quot;00&quot;;

    signal distribui : std_logic_vector(1 downto 0) := &quot;00&quot;;

    -- Sinais temporários para hex0 e hex1
    signal temp_hex0 : std_logic_vector(6 downto 0);
    signal temp_hex1 : std_logic_vector(6 downto 0);

    -- Função para conversão de carta para display de 7 segmentos
    function conversao_hexadecimal(carta : std_logic_vector(3 downto 0)) return std_logic_vector is
    begin
        case carta is
            when &quot;0000&quot; =&gt; return &quot;0000000&quot;; -- 0
            when &quot;0001&quot; =&gt; return &quot;0000110&quot;; -- 1
            when &quot;0010&quot; =&gt; return &quot;1011011&quot;; -- 2
            when &quot;0011&quot; =&gt; return &quot;0011111&quot;; -- 3
            when &quot;0100&quot; =&gt; return &quot;0110110&quot;; -- 4
            when &quot;0101&quot; =&gt; return &quot;0111101&quot;; -- 5
            when &quot;0110&quot; =&gt; return &quot;1111101&quot;; -- 6
            when &quot;0111&quot; =&gt; return &quot;0000111&quot;; -- 7
            when &quot;1000&quot; =&gt; return &quot;1111111&quot;; -- 8
            when &quot;1001&quot; =&gt; return &quot;0111111&quot;; -- 9
            when &quot;1010&quot; =&gt; return &quot;1110111&quot;; -- a (10)
            when &quot;1011&quot; =&gt; return &quot;1111100&quot;; -- b (11)
            when &quot;1100&quot; =&gt; return &quot;1101001&quot;; -- c (12)
            when &quot;1101&quot; =&gt; return &quot;1011110&quot;; -- d (13)
            when others =&gt; return &quot;0000000&quot;; -- tudo apagado
        end case;
    end conversao_hexadecimal;

    function conversao_unidade(valor : integer) return std_logic_vector is
    begin
        case valor is
            when 0 =&gt; return &quot;0000000&quot;;
            when 1 =&gt; return &quot;0000110&quot;;
            when 2 =&gt; return &quot;1011011&quot;;
            when 3 =&gt; return &quot;0011111&quot;;
            when 4 =&gt; return &quot;0110110&quot;;
            when 5 =&gt; return &quot;0111101&quot;;
            when 6 =&gt; return &quot;1111101&quot;;
            when 7 =&gt; return &quot;0000111&quot;;
            when 8 =&gt; return &quot;1111111&quot;;
            when 9 =&gt; return &quot;0111111&quot;;
            when 10 =&gt; return &quot;0000000&quot;;
            when 11 =&gt; return &quot;0000110&quot;;
            when 12 =&gt; return &quot;1011011&quot;;
            when 13 =&gt; return &quot;0011111&quot;;
            when 14 =&gt; return &quot;0110110&quot;;
            when 15 =&gt; return &quot;0111101&quot;;
            when 16 =&gt; return &quot;1111101&quot;;
            when 17 =&gt; return &quot;0000111&quot;;
            when 18 =&gt; return &quot;1111111&quot;;
            when 19 =&gt; return &quot;0111111&quot;;
            when 20 =&gt; return &quot;0000000&quot;;
            when 21 =&gt; return &quot;0000110&quot;;
            when 22 =&gt; return &quot;1011011&quot;;
            when 23 =&gt; return &quot;0011111&quot;;
            when others =&gt; return &quot;0000000&quot;; -- tudo apagado
        end case;
    end function conversao_unidade;

    function conversao_dezena(numero : integer) return std_logic_vector is
    begin
        if (numero &lt; 10) then
            return &quot;0000000&quot;;
        elsif (numero &lt; 20) then
            return &quot;0000110&quot;;
        elsif (numero &lt; 30) then
            return &quot;1011011&quot;;
        elsif (numero &lt; 40) then
            return &quot;0011111&quot;;
        end if;
        return &quot;1000000&quot;;  -- Default case
    end function conversao_dezena;

begin

    process(start_reset, clk)  -- start_reset =&gt; start/reset; clk =&gt; clock;
    begin
        if (start_reset = &apos;1&apos;) then  -- start/reset
            soma_cartas_jogador &lt;= 0;
            soma_cartas_carteador &lt;= 0;
            distribui &lt;= &quot;00&quot;;
            possui_as &lt;= &quot;00&quot;;
            estado_atual &lt;= inicio;

        elsif falling_edge(clk) then  -- lógica de transição de estados embutida no process do clock
            -- Atualizar hex3 com a carta do circuito externo
            if ((distribui /= &quot;01&quot; and estado_atual = inicio) or ((estado_atual = jogador or estado_atual = jogador_as) and stay /= &apos;1&apos;)) then
                hex3 &lt;= conversao_hexadecimal(carta_circuito_externo);
            end if;

            -- Lógica de distribuição de cartas no estado &apos;inicio&apos;
            if (estado_atual = inicio) then
                hex2 &lt;= &quot;0010000&quot;; --identifica se ta no estado de inicio
                if (distribui(0) = &apos;0&apos;) then
                    if (carta_atual = &quot;000001&quot;) then
                        possui_as(0) &lt;= &apos;1&apos;;
                    end if;
                    soma_cartas_jogador &lt;= soma_cartas_jogador + to_integer(unsigned(carta_atual));
                    hex1 &lt;= conversao_dezena(soma_cartas_jogador + to_integer(unsigned(carta_atual)));
                    hex0 &lt;= conversao_unidade(soma_cartas_jogador + to_integer(unsigned(carta_atual)));

                    distribui(0) &lt;= &apos;1&apos;;
                else
                    if (carta_atual = &quot;000001&quot;) then
                        possui_as(1) &lt;= &apos;1&apos;;
                    end if;
                    soma_cartas_carteador &lt;= soma_cartas_carteador + to_integer(unsigned(carta_atual));
                    distribui &lt;= &quot;10&quot;;
                    estado_atual &lt;= jogador;
                end if;
            end if;

            -- Estado de &apos;jogador&apos;
            if (estado_atual = jogador) then
                hex2 &lt;= &quot;0011000&quot;; --identifica se ta no estado de inicio
                if (stay = &apos;1&apos;) then  -- STAY
                    if (possui_as(1) = &apos;1&apos;) then
                        estado_atual &lt;= carteador_as;
                    else
                        estado_atual &lt;= carteador;
                    end if;
                elsif (hit = &apos;1&apos;) then  -- HIT
                    soma_cartas_jogador &lt;= soma_cartas_jogador + to_integer(unsigned(carta_atual));
                    if (soma_cartas_jogador &gt; 21) then
                        estado_atual &lt;= resultado;
                    else
                        hex1 &lt;= conversao_dezena(soma_cartas_jogador + to_integer(unsigned(carta_atual)));
                        hex0 &lt;= conversao_unidade(soma_cartas_jogador + to_integer(unsigned(carta_atual)));
                    end if;
                end if;
            end if;

           -- Estado de &apos;jogador_as&apos; (quando o jogador tem um Ás e quer usá-lo como 11)
            if (estado_atual = jogador_as) then
                if (stay = &apos;1&apos;) then  -- STAY
                    if (possui_as(0) = &apos;1&apos; and soma_cartas_jogador + 10 &lt; 22) then
                        soma_cartas_jogador &lt;= soma_cartas_jogador + 10;
                        -- Atualizar os displays
                        hex1 &lt;= conversao_dezena(soma_cartas_jogador + to_integer(unsigned(carta_atual)));
                        hex0 &lt;= conversao_unidade(soma_cartas_jogador + to_integer(unsigned(carta_atual)));
                    elsif (possui_as(1) = &apos;1&apos;) then  -- Carteador com Ás
                        estado_atual &lt;= carteador_as;
                    else
                        estado_atual &lt;= carteador;
                    end if;
                elsif (hit = &apos;1&apos;) then  -- HIT
                    soma_cartas_jogador &lt;= soma_cartas_jogador + to_integer(unsigned(carta_atual));
                    if (soma_cartas_jogador &gt; 21) then
                        estado_atual &lt;= resultado;
                    else
                        hex1 &lt;= conversao_dezena(soma_cartas_jogador + to_integer(unsigned(carta_atual)));
                        hex0 &lt;= conversao_unidade(soma_cartas_jogador + to_integer(unsigned(carta_atual)));
                    end if;
                end if;
            end if;

            -- Estado de &apos;carteador&apos;
            if (estado_atual = carteador) then
                if (soma_cartas_carteador &lt; 17) then
                    soma_cartas_carteador &lt;= soma_cartas_carteador + to_integer(unsigned(carta_atual));
                    if (soma_cartas_carteador + to_integer(unsigned(carta_atual)) &gt; 21) then
                        estado_atual &lt;= resultado;
                    end if;
                    if (carta_atual = &quot;000001&quot;) then
                        estado_atual &lt;= carteador_as;
                    end if;
                else
                    estado_atual &lt;= resultado;
                end if;
            end if;

            -- Estado de &apos;carteador_as&apos; (quando o carteador tem um Ás)
            if (estado_atual = carteador_as) then
                if (soma_cartas_carteador + 10 &lt; 17) then
                    soma_cartas_carteador &lt;= soma_cartas_carteador + to_integer(unsigned(carta_atual));
                    if (soma_cartas_carteador + to_integer(unsigned(carta_atual)) &gt; 21) then
                        estado_atual &lt;= resultado;
                    end if;
                else
                    if (soma_cartas_carteador + 10 &lt; 22) then
                        soma_cartas_carteador &lt;= soma_cartas_carteador + 10;
                    end if;
                    estado_atual &lt;= resultado;
                end if;
            end if;

        end if;
    end process;

    -- Processo para exibir o resultado final (Vitória, Derrota ou Empate)
    process (estado_atual)
    begin
        -- Resultado (estado resultado)
        if (estado_atual = resultado) then
            -- Se o jogador perdeu (soma &gt; 21 ou carta do jogador é menor que a do carteador, e carteador não passou de 21)
            if (soma_cartas_jogador &gt; 21 or (soma_cartas_jogador &lt; soma_cartas_carteador and soma_cartas_carteador &lt; 22)) then
                ledR(0) &lt;= &apos;1&apos;;  -- Lose
                ledR(1) &lt;= &apos;1&apos;;
                ledR(2) &lt;= &apos;1&apos;;
            -- Se o jogador ganhou (soma do carteador &gt; 21 ou carta do jogador é maior que a do carteador)
            elsif (soma_cartas_carteador &gt; 21 or soma_cartas_carteador &lt; soma_cartas_jogador) then
                ledR(7) &lt;= &apos;1&apos;;  -- Win
                ledR(8) &lt;= &apos;1&apos;;
                ledR(9) &lt;= &apos;1&apos;;
            -- Se for empate
            else
                ledR(4) &lt;= &apos;1&apos;;  -- Tie
                ledR(5) &lt;= &apos;1&apos;;
            end if;
        end if;
    end process;

    -- Processo para a entrada das cartas externas
    process (sw(3), sw(2), sw(1), sw(0))
    variable valor_carta : std_logic_vector(3 downto 0) := &quot;0000&quot;;
    begin
        -- Atribuindo os valores de sw para a variável valor_carta
        valor_carta(0) := sw(0);
        valor_carta(1) := sw(1);
        valor_carta(2) := sw(2);
        valor_carta(3) := sw(3);

        -- Verificando o valor da carta
        if (to_integer(unsigned(valor_carta)) &gt; 10) then
            carta_atual &lt;= &quot;1010&quot;;  -- Atribuindo carta atual para &quot;1010&quot; quando valor &gt; 10
        else
            carta_atual &lt;= valor_carta;  -- Quando a carta for menor ou igual a 10
        end if;

        -- Atribuindo o valor de carta_circuito_externo (cartas externas no circuito)
        carta_circuito_externo &lt;= sw(3 downto 0);
    end process;

end gurizes;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>hex0:7,hex1:7,hex2:7,hex3:7,ledR:10</string>
        </entry>
      </elementAttributes>
      <pos x="460" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="940" y="140"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes/>
      <pos x="260" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes/>
      <pos x="260" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>7</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*7</string>
        </entry>
      </elementAttributes>
      <pos x="760" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
      </elementAttributes>
      <pos x="1040" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes>
        <entry>
          <string>commonConnectionType</string>
          <de.neemann.digital.core.io.CommonConnectionType>anode</de.neemann.digital.core.io.CommonConnectionType>
        </entry>
      </elementAttributes>
      <pos x="1300" y="140"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>7</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*7</string>
        </entry>
      </elementAttributes>
      <pos x="1120" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
      </elementAttributes>
      <pos x="1400" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes>
        <entry>
          <string>commonConnectionType</string>
          <de.neemann.digital.core.io.CommonConnectionType>anode</de.neemann.digital.core.io.CommonConnectionType>
        </entry>
      </elementAttributes>
      <pos x="1620" y="140"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>7</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*7</string>
        </entry>
      </elementAttributes>
      <pos x="1440" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
      </elementAttributes>
      <pos x="1720" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes>
        <entry>
          <string>commonConnectionType</string>
          <de.neemann.digital.core.io.CommonConnectionType>anode</de.neemann.digital.core.io.CommonConnectionType>
        </entry>
      </elementAttributes>
      <pos x="1980" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>7</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*7</string>
        </entry>
      </elementAttributes>
      <pos x="1800" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
      </elementAttributes>
      <pos x="2080" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>10</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*10</string>
        </entry>
      </elementAttributes>
      <pos x="520" y="560"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="820" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="820" y="560"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="820" y="600"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="820" y="640"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="820" y="680"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="820" y="720"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="820" y="760"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="820" y="800"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="820" y="840"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="820" y="880"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes/>
      <pos x="260" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes/>
      <pos x="260" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>10</int>
        </entry>
      </elementAttributes>
      <pos x="260" y="480"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="780" y="320"/>
      <p2 x="820" y="320"/>
    </wire>
    <wire>
      <p1 x="1140" y="320"/>
      <p2 x="1180" y="320"/>
    </wire>
    <wire>
      <p1 x="1460" y="320"/>
      <p2 x="1500" y="320"/>
    </wire>
    <wire>
      <p1 x="1820" y="320"/>
      <p2 x="1840" y="320"/>
    </wire>
    <wire>
      <p1 x="2040" y="320"/>
      <p2 x="2080" y="320"/>
    </wire>
    <wire>
      <p1 x="1780" y="320"/>
      <p2 x="1800" y="320"/>
    </wire>
    <wire>
      <p1 x="520" y="320"/>
      <p2 x="540" y="320"/>
    </wire>
    <wire>
      <p1 x="380" y="320"/>
      <p2 x="460" y="320"/>
    </wire>
    <wire>
      <p1 x="720" y="0"/>
      <p2 x="1440" y="0"/>
    </wire>
    <wire>
      <p1 x="800" y="640"/>
      <p2 x="820" y="640"/>
    </wire>
    <wire>
      <p1 x="540" y="640"/>
      <p2 x="780" y="640"/>
    </wire>
    <wire>
      <p1 x="520" y="260"/>
      <p2 x="720" y="260"/>
    </wire>
    <wire>
      <p1 x="280" y="260"/>
      <p2 x="460" y="260"/>
    </wire>
    <wire>
      <p1 x="540" y="580"/>
      <p2 x="580" y="580"/>
    </wire>
    <wire>
      <p1 x="600" y="580"/>
      <p2 x="780" y="580"/>
    </wire>
    <wire>
      <p1 x="500" y="520"/>
      <p2 x="540" y="520"/>
    </wire>
    <wire>
      <p1 x="560" y="520"/>
      <p2 x="820" y="520"/>
    </wire>
    <wire>
      <p1 x="800" y="840"/>
      <p2 x="820" y="840"/>
    </wire>
    <wire>
      <p1 x="1840" y="140"/>
      <p2 x="1980" y="140"/>
    </wire>
    <wire>
      <p1 x="780" y="780"/>
      <p2 x="800" y="780"/>
    </wire>
    <wire>
      <p1 x="700" y="780"/>
      <p2 x="760" y="780"/>
    </wire>
    <wire>
      <p1 x="840" y="80"/>
      <p2 x="980" y="80"/>
    </wire>
    <wire>
      <p1 x="1200" y="80"/>
      <p2 x="1340" y="80"/>
    </wire>
    <wire>
      <p1 x="1520" y="80"/>
      <p2 x="1660" y="80"/>
    </wire>
    <wire>
      <p1 x="1900" y="80"/>
      <p2 x="2040" y="80"/>
    </wire>
    <wire>
      <p1 x="780" y="400"/>
      <p2 x="960" y="400"/>
    </wire>
    <wire>
      <p1 x="1140" y="400"/>
      <p2 x="1320" y="400"/>
    </wire>
    <wire>
      <p1 x="1460" y="400"/>
      <p2 x="1640" y="400"/>
    </wire>
    <wire>
      <p1 x="1820" y="400"/>
      <p2 x="2020" y="400"/>
    </wire>
    <wire>
      <p1 x="800" y="720"/>
      <p2 x="820" y="720"/>
    </wire>
    <wire>
      <p1 x="540" y="720"/>
      <p2 x="700" y="720"/>
    </wire>
    <wire>
      <p1 x="680" y="-20"/>
      <p2 x="1780" y="-20"/>
    </wire>
    <wire>
      <p1 x="780" y="340"/>
      <p2 x="840" y="340"/>
    </wire>
    <wire>
      <p1 x="1140" y="340"/>
      <p2 x="1200" y="340"/>
    </wire>
    <wire>
      <p1 x="1460" y="340"/>
      <p2 x="1520" y="340"/>
    </wire>
    <wire>
      <p1 x="1820" y="340"/>
      <p2 x="1860" y="340"/>
    </wire>
    <wire>
      <p1 x="540" y="660"/>
      <p2 x="760" y="660"/>
    </wire>
    <wire>
      <p1 x="520" y="280"/>
      <p2 x="760" y="280"/>
    </wire>
    <wire>
      <p1 x="320" y="280"/>
      <p2 x="460" y="280"/>
    </wire>
    <wire>
      <p1 x="540" y="600"/>
      <p2 x="600" y="600"/>
    </wire>
    <wire>
      <p1 x="780" y="600"/>
      <p2 x="820" y="600"/>
    </wire>
    <wire>
      <p1 x="580" y="540"/>
      <p2 x="800" y="540"/>
    </wire>
    <wire>
      <p1 x="760" y="860"/>
      <p2 x="800" y="860"/>
    </wire>
    <wire>
      <p1 x="800" y="800"/>
      <p2 x="820" y="800"/>
    </wire>
    <wire>
      <p1 x="760" y="800"/>
      <p2 x="780" y="800"/>
    </wire>
    <wire>
      <p1 x="680" y="800"/>
      <p2 x="740" y="800"/>
    </wire>
    <wire>
      <p1 x="260" y="480"/>
      <p2 x="380" y="480"/>
    </wire>
    <wire>
      <p1 x="780" y="420"/>
      <p2 x="940" y="420"/>
    </wire>
    <wire>
      <p1 x="1140" y="420"/>
      <p2 x="1300" y="420"/>
    </wire>
    <wire>
      <p1 x="1460" y="420"/>
      <p2 x="1620" y="420"/>
    </wire>
    <wire>
      <p1 x="1820" y="420"/>
      <p2 x="2000" y="420"/>
    </wire>
    <wire>
      <p1 x="260" y="420"/>
      <p2 x="340" y="420"/>
    </wire>
    <wire>
      <p1 x="820" y="100"/>
      <p2 x="960" y="100"/>
    </wire>
    <wire>
      <p1 x="1180" y="100"/>
      <p2 x="1320" y="100"/>
    </wire>
    <wire>
      <p1 x="1500" y="100"/>
      <p2 x="1640" y="100"/>
    </wire>
    <wire>
      <p1 x="1880" y="100"/>
      <p2 x="2020" y="100"/>
    </wire>
    <wire>
      <p1 x="740" y="740"/>
      <p2 x="800" y="740"/>
    </wire>
    <wire>
      <p1 x="540" y="740"/>
      <p2 x="680" y="740"/>
    </wire>
    <wire>
      <p1 x="780" y="360"/>
      <p2 x="860" y="360"/>
    </wire>
    <wire>
      <p1 x="1140" y="360"/>
      <p2 x="1220" y="360"/>
    </wire>
    <wire>
      <p1 x="1460" y="360"/>
      <p2 x="1540" y="360"/>
    </wire>
    <wire>
      <p1 x="1820" y="360"/>
      <p2 x="1880" y="360"/>
    </wire>
    <wire>
      <p1 x="260" y="360"/>
      <p2 x="320" y="360"/>
    </wire>
    <wire>
      <p1 x="760" y="40"/>
      <p2 x="1060" y="40"/>
    </wire>
    <wire>
      <p1 x="780" y="680"/>
      <p2 x="820" y="680"/>
    </wire>
    <wire>
      <p1 x="540" y="680"/>
      <p2 x="740" y="680"/>
    </wire>
    <wire>
      <p1 x="520" y="300"/>
      <p2 x="760" y="300"/>
    </wire>
    <wire>
      <p1 x="780" y="300"/>
      <p2 x="800" y="300"/>
    </wire>
    <wire>
      <p1 x="1000" y="300"/>
      <p2 x="1040" y="300"/>
    </wire>
    <wire>
      <p1 x="1140" y="300"/>
      <p2 x="1160" y="300"/>
    </wire>
    <wire>
      <p1 x="1360" y="300"/>
      <p2 x="1400" y="300"/>
    </wire>
    <wire>
      <p1 x="1060" y="300"/>
      <p2 x="1120" y="300"/>
    </wire>
    <wire>
      <p1 x="1460" y="300"/>
      <p2 x="1480" y="300"/>
    </wire>
    <wire>
      <p1 x="1680" y="300"/>
      <p2 x="1720" y="300"/>
    </wire>
    <wire>
      <p1 x="260" y="300"/>
      <p2 x="280" y="300"/>
    </wire>
    <wire>
      <p1 x="340" y="300"/>
      <p2 x="460" y="300"/>
    </wire>
    <wire>
      <p1 x="540" y="620"/>
      <p2 x="800" y="620"/>
    </wire>
    <wire>
      <p1 x="260" y="240"/>
      <p2 x="460" y="240"/>
    </wire>
    <wire>
      <p1 x="520" y="240"/>
      <p2 x="680" y="240"/>
    </wire>
    <wire>
      <p1 x="500" y="560"/>
      <p2 x="520" y="560"/>
    </wire>
    <wire>
      <p1 x="540" y="560"/>
      <p2 x="560" y="560"/>
    </wire>
    <wire>
      <p1 x="800" y="560"/>
      <p2 x="820" y="560"/>
    </wire>
    <wire>
      <p1 x="800" y="880"/>
      <p2 x="820" y="880"/>
    </wire>
    <wire>
      <p1 x="780" y="820"/>
      <p2 x="800" y="820"/>
    </wire>
    <wire>
      <p1 x="740" y="820"/>
      <p2 x="760" y="820"/>
    </wire>
    <wire>
      <p1 x="800" y="120"/>
      <p2 x="940" y="120"/>
    </wire>
    <wire>
      <p1 x="1160" y="120"/>
      <p2 x="1300" y="120"/>
    </wire>
    <wire>
      <p1 x="1480" y="120"/>
      <p2 x="1620" y="120"/>
    </wire>
    <wire>
      <p1 x="1860" y="120"/>
      <p2 x="2000" y="120"/>
    </wire>
    <wire>
      <p1 x="1820" y="440"/>
      <p2 x="1980" y="440"/>
    </wire>
    <wire>
      <p1 x="800" y="760"/>
      <p2 x="820" y="760"/>
    </wire>
    <wire>
      <p1 x="720" y="760"/>
      <p2 x="780" y="760"/>
    </wire>
    <wire>
      <p1 x="860" y="60"/>
      <p2 x="1000" y="60"/>
    </wire>
    <wire>
      <p1 x="1220" y="60"/>
      <p2 x="1360" y="60"/>
    </wire>
    <wire>
      <p1 x="1540" y="60"/>
      <p2 x="1680" y="60"/>
    </wire>
    <wire>
      <p1 x="780" y="380"/>
      <p2 x="980" y="380"/>
    </wire>
    <wire>
      <p1 x="1140" y="380"/>
      <p2 x="1340" y="380"/>
    </wire>
    <wire>
      <p1 x="1460" y="380"/>
      <p2 x="1660" y="380"/>
    </wire>
    <wire>
      <p1 x="1820" y="380"/>
      <p2 x="1900" y="380"/>
    </wire>
    <wire>
      <p1 x="760" y="700"/>
      <p2 x="800" y="700"/>
    </wire>
    <wire>
      <p1 x="540" y="700"/>
      <p2 x="720" y="700"/>
    </wire>
    <wire>
      <p1 x="1540" y="60"/>
      <p2 x="1540" y="360"/>
    </wire>
    <wire>
      <p1 x="1160" y="120"/>
      <p2 x="1160" y="300"/>
    </wire>
    <wire>
      <p1 x="780" y="580"/>
      <p2 x="780" y="600"/>
    </wire>
    <wire>
      <p1 x="780" y="640"/>
      <p2 x="780" y="680"/>
    </wire>
    <wire>
      <p1 x="780" y="760"/>
      <p2 x="780" y="780"/>
    </wire>
    <wire>
      <p1 x="780" y="800"/>
      <p2 x="780" y="820"/>
    </wire>
    <wire>
      <p1 x="1680" y="60"/>
      <p2 x="1680" y="140"/>
    </wire>
    <wire>
      <p1 x="1680" y="280"/>
      <p2 x="1680" y="300"/>
    </wire>
    <wire>
      <p1 x="1300" y="120"/>
      <p2 x="1300" y="140"/>
    </wire>
    <wire>
      <p1 x="1300" y="280"/>
      <p2 x="1300" y="420"/>
    </wire>
    <wire>
      <p1 x="280" y="260"/>
      <p2 x="280" y="300"/>
    </wire>
    <wire>
      <p1 x="1180" y="100"/>
      <p2 x="1180" y="320"/>
    </wire>
    <wire>
      <p1 x="540" y="320"/>
      <p2 x="540" y="520"/>
    </wire>
    <wire>
      <p1 x="800" y="120"/>
      <p2 x="800" y="300"/>
    </wire>
    <wire>
      <p1 x="800" y="540"/>
      <p2 x="800" y="560"/>
    </wire>
    <wire>
      <p1 x="800" y="620"/>
      <p2 x="800" y="640"/>
    </wire>
    <wire>
      <p1 x="800" y="700"/>
      <p2 x="800" y="720"/>
    </wire>
    <wire>
      <p1 x="800" y="740"/>
      <p2 x="800" y="760"/>
    </wire>
    <wire>
      <p1 x="800" y="780"/>
      <p2 x="800" y="800"/>
    </wire>
    <wire>
      <p1 x="800" y="820"/>
      <p2 x="800" y="840"/>
    </wire>
    <wire>
      <p1 x="800" y="860"/>
      <p2 x="800" y="880"/>
    </wire>
    <wire>
      <p1 x="1440" y="0"/>
      <p2 x="1440" y="300"/>
    </wire>
    <wire>
      <p1 x="1060" y="40"/>
      <p2 x="1060" y="300"/>
    </wire>
    <wire>
      <p1 x="1320" y="100"/>
      <p2 x="1320" y="140"/>
    </wire>
    <wire>
      <p1 x="1320" y="280"/>
      <p2 x="1320" y="400"/>
    </wire>
    <wire>
      <p1 x="680" y="-20"/>
      <p2 x="680" y="240"/>
    </wire>
    <wire>
      <p1 x="680" y="740"/>
      <p2 x="680" y="800"/>
    </wire>
    <wire>
      <p1 x="940" y="120"/>
      <p2 x="940" y="140"/>
    </wire>
    <wire>
      <p1 x="940" y="280"/>
      <p2 x="940" y="420"/>
    </wire>
    <wire>
      <p1 x="1200" y="80"/>
      <p2 x="1200" y="340"/>
    </wire>
    <wire>
      <p1 x="1840" y="140"/>
      <p2 x="1840" y="320"/>
    </wire>
    <wire>
      <p1 x="560" y="520"/>
      <p2 x="560" y="560"/>
    </wire>
    <wire>
      <p1 x="820" y="100"/>
      <p2 x="820" y="320"/>
    </wire>
    <wire>
      <p1 x="1340" y="80"/>
      <p2 x="1340" y="140"/>
    </wire>
    <wire>
      <p1 x="1340" y="280"/>
      <p2 x="1340" y="380"/>
    </wire>
    <wire>
      <p1 x="1980" y="140"/>
      <p2 x="1980" y="160"/>
    </wire>
    <wire>
      <p1 x="1980" y="300"/>
      <p2 x="1980" y="440"/>
    </wire>
    <wire>
      <p1 x="700" y="720"/>
      <p2 x="700" y="780"/>
    </wire>
    <wire>
      <p1 x="960" y="100"/>
      <p2 x="960" y="140"/>
    </wire>
    <wire>
      <p1 x="960" y="280"/>
      <p2 x="960" y="400"/>
    </wire>
    <wire>
      <p1 x="320" y="280"/>
      <p2 x="320" y="360"/>
    </wire>
    <wire>
      <p1 x="1220" y="60"/>
      <p2 x="1220" y="360"/>
    </wire>
    <wire>
      <p1 x="1860" y="120"/>
      <p2 x="1860" y="340"/>
    </wire>
    <wire>
      <p1 x="580" y="540"/>
      <p2 x="580" y="580"/>
    </wire>
    <wire>
      <p1 x="840" y="80"/>
      <p2 x="840" y="340"/>
    </wire>
    <wire>
      <p1 x="1480" y="120"/>
      <p2 x="1480" y="300"/>
    </wire>
    <wire>
      <p1 x="1360" y="60"/>
      <p2 x="1360" y="140"/>
    </wire>
    <wire>
      <p1 x="1360" y="280"/>
      <p2 x="1360" y="300"/>
    </wire>
    <wire>
      <p1 x="2000" y="120"/>
      <p2 x="2000" y="160"/>
    </wire>
    <wire>
      <p1 x="2000" y="300"/>
      <p2 x="2000" y="420"/>
    </wire>
    <wire>
      <p1 x="720" y="0"/>
      <p2 x="720" y="260"/>
    </wire>
    <wire>
      <p1 x="720" y="700"/>
      <p2 x="720" y="760"/>
    </wire>
    <wire>
      <p1 x="980" y="80"/>
      <p2 x="980" y="140"/>
    </wire>
    <wire>
      <p1 x="980" y="280"/>
      <p2 x="980" y="380"/>
    </wire>
    <wire>
      <p1 x="1620" y="120"/>
      <p2 x="1620" y="140"/>
    </wire>
    <wire>
      <p1 x="1620" y="280"/>
      <p2 x="1620" y="420"/>
    </wire>
    <wire>
      <p1 x="340" y="300"/>
      <p2 x="340" y="420"/>
    </wire>
    <wire>
      <p1 x="1880" y="100"/>
      <p2 x="1880" y="360"/>
    </wire>
    <wire>
      <p1 x="600" y="580"/>
      <p2 x="600" y="600"/>
    </wire>
    <wire>
      <p1 x="860" y="60"/>
      <p2 x="860" y="360"/>
    </wire>
    <wire>
      <p1 x="1500" y="100"/>
      <p2 x="1500" y="320"/>
    </wire>
    <wire>
      <p1 x="2020" y="100"/>
      <p2 x="2020" y="160"/>
    </wire>
    <wire>
      <p1 x="2020" y="300"/>
      <p2 x="2020" y="400"/>
    </wire>
    <wire>
      <p1 x="740" y="680"/>
      <p2 x="740" y="740"/>
    </wire>
    <wire>
      <p1 x="740" y="800"/>
      <p2 x="740" y="820"/>
    </wire>
    <wire>
      <p1 x="1000" y="60"/>
      <p2 x="1000" y="140"/>
    </wire>
    <wire>
      <p1 x="1000" y="280"/>
      <p2 x="1000" y="300"/>
    </wire>
    <wire>
      <p1 x="1640" y="100"/>
      <p2 x="1640" y="140"/>
    </wire>
    <wire>
      <p1 x="1640" y="280"/>
      <p2 x="1640" y="400"/>
    </wire>
    <wire>
      <p1 x="1900" y="80"/>
      <p2 x="1900" y="380"/>
    </wire>
    <wire>
      <p1 x="1520" y="80"/>
      <p2 x="1520" y="340"/>
    </wire>
    <wire>
      <p1 x="1780" y="-20"/>
      <p2 x="1780" y="320"/>
    </wire>
    <wire>
      <p1 x="500" y="520"/>
      <p2 x="500" y="560"/>
    </wire>
    <wire>
      <p1 x="760" y="40"/>
      <p2 x="760" y="280"/>
    </wire>
    <wire>
      <p1 x="760" y="660"/>
      <p2 x="760" y="700"/>
    </wire>
    <wire>
      <p1 x="760" y="780"/>
      <p2 x="760" y="800"/>
    </wire>
    <wire>
      <p1 x="760" y="820"/>
      <p2 x="760" y="860"/>
    </wire>
    <wire>
      <p1 x="2040" y="80"/>
      <p2 x="2040" y="160"/>
    </wire>
    <wire>
      <p1 x="2040" y="300"/>
      <p2 x="2040" y="320"/>
    </wire>
    <wire>
      <p1 x="1660" y="80"/>
      <p2 x="1660" y="140"/>
    </wire>
    <wire>
      <p1 x="1660" y="280"/>
      <p2 x="1660" y="380"/>
    </wire>
    <wire>
      <p1 x="380" y="320"/>
      <p2 x="380" y="480"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>